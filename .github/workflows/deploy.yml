name: Deploy to Ubuntu VM on GCP


on:
    push:
        branches:
          - main
        tags:
          - '*'


jobs:

    publish-docker:
        name: Publish Docker
        concurrency:
            group: deployment
        runs-on: ubuntu-latest

        if: contains(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/')

        permissions:
            contents: read
            packages: write

        services:
            docker:
                image: docker:dind
                options: >-
                    --privileged --env DOCKER_TLS_CERTDIR= --publish 2375:2375

        env:
            DOCKER_HOST: 'tcp://127.0.0.1:2375'
            DOCKER_DRIVER: overlay2
            REPO_OWNER: infinitydude007
            REPO_NAME: agal-prototype

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Wait for Docker Daemon
              run: |
                for i in {1..10}; do
                    if docker info; then
                    break
                    fi
                    echo "Waiting for Docker Daemon..."
                    sleep 3
                done

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up Python
              uses: actions/setup-python@v3
              with:
                python-version: '3.11'

            - name: Install Python dependencies
              run: |
                cd server
                pip install -r requirements.txt

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                node-version: '23.6.1'
                cache: 'npm'
                cache-dependency-path: 'client/package-lock.json'

            - name: Install Node.js dependencies
              run: |
                cd client
                npm install

            - name: Build and push Python Docker image to ghcr
              run: |
                echo "Building Python image"
                echo "Pushing ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}-server:${{ github.sha }}"
                docker build --build-arg BACKEND_PORT=${{ secrets.BACKEND_PORT }} \
                -t ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}-server:${{ github.sha }} ./server
                docker push ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}-server:${{ github.sha }}

            - name: Build and push React.js Docker image to ghcr
              run: |
                echo "Building React.js image"
                echo "Pushing ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}-client:${{ github.sha }}"
                docker build --build-arg FRONTEND_PORT=${{ secrets.FRONTEND_PORT }} -t ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}-client:${{ github.sha }} ./client
                docker push ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}-client:${{ github.sha }}

            - name: Build and push Nginx Docker image to ghcr
              run: |
                echo "Building Nginx image"
                echo "Pushing ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}-nginx:${{ github.sha }}"
                docker build \
                    --build-arg BACKEND_HOST=${{ secrets.BACKEND_HOST }} \
                    --build-arg FRONTEND_PORT=${{ secrets.FRONTEND_PORT }} \
                    --build-arg NGINX_PORT=${{ secrets.NGINX_PORT }} \
                -t ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}-nginx:${{ github.sha }} ./nginx
                docker push ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}-nginx:${{ github.sha }}

            - name: Clean up old images
              run: |
                docker system prune --all --force
            
                
    deploy:
        name: Deploy development app via SSH
        runs-on: ubuntu-latest
        needs: publish-docker
        concurrency:
            group: deployment
        if: startsWith(github.ref, 'refs/tags/')

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up SSH key
              run: |
                mkdir -p ~/.ssh
                echo "${{ secrets.AGAL_SSH_KEY }}" > ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa
                eval $(ssh-agent -s)
                ssh-add ~/.ssh/id_rsa

            - name: Add SSH known hosts
              run: |
                ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts || true

            - name: Transfer files to the server
              run: |
                scp -o StrictHostKeyChecking=no docker-compose.deploy.yml ${{ secrets.VM_USER }}@${{ secrets.VM_IP }}:/home/ubuntu/agal-prototype

            - name: Create .env file on server
              run: |
                ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "
                    printf '%s\n' '${{ secrets.DEPLOYMENT_ENV }}' > /home/ubuntu/agal-prototype/.env &&
                    echo 'SERVER_IMAGE=ghcr.io/infinitydude007/agal-prototype-server:${{ github.sha }}' >> /home/ubuntu/agal-prototype/.env &&
                    echo 'CLIENT_IMAGE=ghcr.io/infinitydude007/agal-prototype-client:${{ github.sha }}' >> /home/ubuntu/agal-prototype/.env &&
                    echo 'NGINX_IMAGE=ghcr.io/infinitydude007/agal-prototype-nginx:${{ github.sha }}' >> /home/ubuntu/agal-prototype/.env
                    "

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Pull images and start containers on VM
              run: |
                ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "
                    cd /home/ubuntu/agal-prototype && docker-compose -f docker-compose.deploy.yml --env-file .env -p agal-prototype down -v
                    docker-compose -f docker-compose.deploy.yml --env-file .env -p agal-prototype pull
                    docker-compose -f docker-compose.deploy.yml --env-file .env -p agal-prototype up -d
                    docker system prune --volumes --all --force
                "
